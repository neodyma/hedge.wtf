/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u16,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { AssetMeta, AssetMetaArgs, getAssetMetaSerializer } from '../types';

export type AssetRegistry = Account<AssetRegistryAccountData>;

export type AssetRegistryAccountData = {
  discriminator: Uint8Array;
  market: PublicKey;
  bump: number;
  count: number;
  assets: Array<AssetMeta>;
};

export type AssetRegistryAccountDataArgs = {
  market: PublicKey;
  bump: number;
  count: number;
  assets: Array<AssetMetaArgs>;
};

export function getAssetRegistryAccountDataSerializer(): Serializer<
  AssetRegistryAccountDataArgs,
  AssetRegistryAccountData
> {
  return mapSerializer<
    AssetRegistryAccountDataArgs,
    any,
    AssetRegistryAccountData
  >(
    struct<AssetRegistryAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['market', publicKeySerializer()],
        ['bump', u8()],
        ['count', u16()],
        ['assets', array(getAssetMetaSerializer())],
      ],
      { description: 'AssetRegistryAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([60, 94, 213, 134, 205, 170, 175, 68]),
    })
  ) as Serializer<AssetRegistryAccountDataArgs, AssetRegistryAccountData>;
}

export function deserializeAssetRegistry(
  rawAccount: RpcAccount
): AssetRegistry {
  return deserializeAccount(
    rawAccount,
    getAssetRegistryAccountDataSerializer()
  );
}

export async function fetchAssetRegistry(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AssetRegistry> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'AssetRegistry');
  return deserializeAssetRegistry(maybeAccount);
}

export async function safeFetchAssetRegistry(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AssetRegistry | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeAssetRegistry(maybeAccount) : null;
}

export async function fetchAllAssetRegistry(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AssetRegistry[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'AssetRegistry');
    return deserializeAssetRegistry(maybeAccount);
  });
}

export async function safeFetchAllAssetRegistry(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AssetRegistry[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeAssetRegistry(maybeAccount as RpcAccount)
    );
}

export function getAssetRegistryGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'zodialV2',
    '5E1ikr753b8RQZdtohZAY8wmpjn2hu9dWzrN5xEasmtu'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      market: PublicKey;
      bump: number;
      count: number;
      assets: Array<AssetMetaArgs>;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      market: [8, publicKeySerializer()],
      bump: [40, u8()],
      count: [41, u16()],
      assets: [43, array(getAssetMetaSerializer())],
    })
    .deserializeUsing<AssetRegistry>((account) =>
      deserializeAssetRegistry(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([60, 94, 213, 134, 205, 170, 175, 68])
    );
}

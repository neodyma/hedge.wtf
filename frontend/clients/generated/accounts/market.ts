/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u16,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { PriceMode, PriceModeArgs, getPriceModeSerializer } from '../types';

export type Market = Account<MarketAccountData>;

export type MarketAccountData = {
  discriminator: Uint8Array;
  authority: PublicKey;
  maxAssets: number;
  maxPositions: number;
  defaultLtvBps: number;
  defaultLiqThresholdBps: number;
  defaultLiqBonusBps: number;
  priceMode: PriceMode;
  version: number;
  bump: number;
  priceCacheBump: number;
  paused: boolean;
  pythMaxAgeSecs: bigint;
};

export type MarketAccountDataArgs = {
  authority: PublicKey;
  maxAssets: number;
  maxPositions: number;
  defaultLtvBps: number;
  defaultLiqThresholdBps: number;
  defaultLiqBonusBps: number;
  priceMode: PriceModeArgs;
  version: number;
  bump: number;
  priceCacheBump: number;
  paused: boolean;
  pythMaxAgeSecs: number | bigint;
};

export function getMarketAccountDataSerializer(): Serializer<
  MarketAccountDataArgs,
  MarketAccountData
> {
  return mapSerializer<MarketAccountDataArgs, any, MarketAccountData>(
    struct<MarketAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', publicKeySerializer()],
        ['maxAssets', u16()],
        ['maxPositions', u16()],
        ['defaultLtvBps', u16()],
        ['defaultLiqThresholdBps', u16()],
        ['defaultLiqBonusBps', u16()],
        ['priceMode', getPriceModeSerializer()],
        ['version', u8()],
        ['bump', u8()],
        ['priceCacheBump', u8()],
        ['paused', bool()],
        ['pythMaxAgeSecs', u64()],
      ],
      { description: 'MarketAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([219, 190, 213, 55, 0, 227, 198, 154]),
    })
  ) as Serializer<MarketAccountDataArgs, MarketAccountData>;
}

export function deserializeMarket(rawAccount: RpcAccount): Market {
  return deserializeAccount(rawAccount, getMarketAccountDataSerializer());
}

export async function fetchMarket(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Market> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Market');
  return deserializeMarket(maybeAccount);
}

export async function safeFetchMarket(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Market | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMarket(maybeAccount) : null;
}

export async function fetchAllMarket(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Market[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Market');
    return deserializeMarket(maybeAccount);
  });
}

export async function safeFetchAllMarket(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Market[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMarket(maybeAccount as RpcAccount));
}

export function getMarketGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'zodialV2',
    '5E1ikr753b8RQZdtohZAY8wmpjn2hu9dWzrN5xEasmtu'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: PublicKey;
      maxAssets: number;
      maxPositions: number;
      defaultLtvBps: number;
      defaultLiqThresholdBps: number;
      defaultLiqBonusBps: number;
      priceMode: PriceModeArgs;
      version: number;
      bump: number;
      priceCacheBump: number;
      paused: boolean;
      pythMaxAgeSecs: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, publicKeySerializer()],
      maxAssets: [40, u16()],
      maxPositions: [42, u16()],
      defaultLtvBps: [44, u16()],
      defaultLiqThresholdBps: [46, u16()],
      defaultLiqBonusBps: [48, u16()],
      priceMode: [50, getPriceModeSerializer()],
      version: [51, u8()],
      bump: [52, u8()],
      priceCacheBump: [53, u8()],
      paused: [54, bool()],
      pythMaxAgeSecs: [55, u64()],
    })
    .deserializeUsing<Market>((account) => deserializeMarket(account))
    .whereField(
      'discriminator',
      new Uint8Array([219, 190, 213, 55, 0, 227, 198, 154])
    );
}

export function getMarketSize(): number {
  return 63;
}

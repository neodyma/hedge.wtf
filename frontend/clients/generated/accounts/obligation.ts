/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { Position, PositionArgs, getPositionSerializer } from '../types';

export type Obligation = Account<ObligationAccountData>;

export type ObligationAccountData = {
  discriminator: Uint8Array;
  market: PublicKey;
  owner: PublicKey;
  positions: Array<Position>;
  bump: number;
};

export type ObligationAccountDataArgs = {
  market: PublicKey;
  owner: PublicKey;
  positions: Array<PositionArgs>;
  bump: number;
};

export function getObligationAccountDataSerializer(): Serializer<
  ObligationAccountDataArgs,
  ObligationAccountData
> {
  return mapSerializer<ObligationAccountDataArgs, any, ObligationAccountData>(
    struct<ObligationAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['market', publicKeySerializer()],
        ['owner', publicKeySerializer()],
        ['positions', array(getPositionSerializer())],
        ['bump', u8()],
      ],
      { description: 'ObligationAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([168, 206, 141, 106, 88, 76, 172, 167]),
    })
  ) as Serializer<ObligationAccountDataArgs, ObligationAccountData>;
}

export function deserializeObligation(rawAccount: RpcAccount): Obligation {
  return deserializeAccount(rawAccount, getObligationAccountDataSerializer());
}

export async function fetchObligation(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Obligation> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Obligation');
  return deserializeObligation(maybeAccount);
}

export async function safeFetchObligation(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Obligation | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeObligation(maybeAccount) : null;
}

export async function fetchAllObligation(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Obligation[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Obligation');
    return deserializeObligation(maybeAccount);
  });
}

export async function safeFetchAllObligation(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Obligation[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeObligation(maybeAccount as RpcAccount));
}

export function getObligationGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'zodialV2',
    '5E1ikr753b8RQZdtohZAY8wmpjn2hu9dWzrN5xEasmtu'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      market: PublicKey;
      owner: PublicKey;
      positions: Array<PositionArgs>;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      market: [8, publicKeySerializer()],
      owner: [40, publicKeySerializer()],
      positions: [72, array(getPositionSerializer())],
      bump: [null, u8()],
    })
    .deserializeUsing<Obligation>((account) => deserializeObligation(account))
    .whereField(
      'discriminator',
      new Uint8Array([168, 206, 141, 106, 88, 76, 172, 167])
    );
}

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u128,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { RateModel, RateModelArgs, getRateModelSerializer } from '../types';

export type Pool = Account<PoolAccountData>;

export type PoolAccountData = {
  discriminator: Uint8Array;
  market: PublicKey;
  mint: PublicKey;
  vault: PublicKey;
  borrowFacQ60: bigint;
  depositFacQ60: bigint;
  totalBorrowSharesQ60: bigint;
  totalDepositSharesQ60: bigint;
  lastTimestamp: bigint;
  rate: RateModel;
  bump: number;
  vaultAuthBump: number;
};

export type PoolAccountDataArgs = {
  market: PublicKey;
  mint: PublicKey;
  vault: PublicKey;
  borrowFacQ60: number | bigint;
  depositFacQ60: number | bigint;
  totalBorrowSharesQ60: number | bigint;
  totalDepositSharesQ60: number | bigint;
  lastTimestamp: number | bigint;
  rate: RateModelArgs;
  bump: number;
  vaultAuthBump: number;
};

export function getPoolAccountDataSerializer(): Serializer<
  PoolAccountDataArgs,
  PoolAccountData
> {
  return mapSerializer<PoolAccountDataArgs, any, PoolAccountData>(
    struct<PoolAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['market', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['vault', publicKeySerializer()],
        ['borrowFacQ60', u128()],
        ['depositFacQ60', u128()],
        ['totalBorrowSharesQ60', u128()],
        ['totalDepositSharesQ60', u128()],
        ['lastTimestamp', i64()],
        ['rate', getRateModelSerializer()],
        ['bump', u8()],
        ['vaultAuthBump', u8()],
      ],
      { description: 'PoolAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188]),
    })
  ) as Serializer<PoolAccountDataArgs, PoolAccountData>;
}

export function deserializePool(rawAccount: RpcAccount): Pool {
  return deserializeAccount(rawAccount, getPoolAccountDataSerializer());
}

export async function fetchPool(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Pool> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Pool');
  return deserializePool(maybeAccount);
}

export async function safeFetchPool(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Pool | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePool(maybeAccount) : null;
}

export async function fetchAllPool(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Pool[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Pool');
    return deserializePool(maybeAccount);
  });
}

export async function safeFetchAllPool(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Pool[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePool(maybeAccount as RpcAccount));
}

export function getPoolGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'zodialV2',
    '5E1ikr753b8RQZdtohZAY8wmpjn2hu9dWzrN5xEasmtu'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      market: PublicKey;
      mint: PublicKey;
      vault: PublicKey;
      borrowFacQ60: number | bigint;
      depositFacQ60: number | bigint;
      totalBorrowSharesQ60: number | bigint;
      totalDepositSharesQ60: number | bigint;
      lastTimestamp: number | bigint;
      rate: RateModelArgs;
      bump: number;
      vaultAuthBump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      market: [8, publicKeySerializer()],
      mint: [40, publicKeySerializer()],
      vault: [72, publicKeySerializer()],
      borrowFacQ60: [104, u128()],
      depositFacQ60: [120, u128()],
      totalBorrowSharesQ60: [136, u128()],
      totalDepositSharesQ60: [152, u128()],
      lastTimestamp: [168, i64()],
      rate: [176, getRateModelSerializer()],
      bump: [188, u8()],
      vaultAuthBump: [189, u8()],
    })
    .deserializeUsing<Pool>((account) => deserializePool(account))
    .whereField(
      'discriminator',
      new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188])
    );
}

export function getPoolSize(): number {
  return 190;
}

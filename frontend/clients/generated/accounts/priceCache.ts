/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { PriceEntry, PriceEntryArgs, getPriceEntrySerializer } from '../types';

export type PriceCache = Account<PriceCacheAccountData>;

export type PriceCacheAccountData = {
  discriminator: Uint8Array;
  market: PublicKey;
  bump: number;
  lastSlot: bigint;
  prices: Array<PriceEntry>;
};

export type PriceCacheAccountDataArgs = {
  market: PublicKey;
  bump: number;
  lastSlot: number | bigint;
  prices: Array<PriceEntryArgs>;
};

export function getPriceCacheAccountDataSerializer(): Serializer<
  PriceCacheAccountDataArgs,
  PriceCacheAccountData
> {
  return mapSerializer<PriceCacheAccountDataArgs, any, PriceCacheAccountData>(
    struct<PriceCacheAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['market', publicKeySerializer()],
        ['bump', u8()],
        ['lastSlot', u64()],
        ['prices', array(getPriceEntrySerializer())],
      ],
      { description: 'PriceCacheAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([198, 211, 186, 101, 228, 22, 101, 190]),
    })
  ) as Serializer<PriceCacheAccountDataArgs, PriceCacheAccountData>;
}

export function deserializePriceCache(rawAccount: RpcAccount): PriceCache {
  return deserializeAccount(rawAccount, getPriceCacheAccountDataSerializer());
}

export async function fetchPriceCache(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PriceCache> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'PriceCache');
  return deserializePriceCache(maybeAccount);
}

export async function safeFetchPriceCache(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PriceCache | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePriceCache(maybeAccount) : null;
}

export async function fetchAllPriceCache(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PriceCache[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PriceCache');
    return deserializePriceCache(maybeAccount);
  });
}

export async function safeFetchAllPriceCache(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PriceCache[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePriceCache(maybeAccount as RpcAccount));
}

export function getPriceCacheGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'zodialV2',
    '5E1ikr753b8RQZdtohZAY8wmpjn2hu9dWzrN5xEasmtu'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      market: PublicKey;
      bump: number;
      lastSlot: number | bigint;
      prices: Array<PriceEntryArgs>;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      market: [8, publicKeySerializer()],
      bump: [40, u8()],
      lastSlot: [41, u64()],
      prices: [49, array(getPriceEntrySerializer())],
    })
    .deserializeUsing<PriceCache>((account) => deserializePriceCache(account))
    .whereField(
      'discriminator',
      new Uint8Array([198, 211, 186, 101, 228, 22, 101, 190])
    );
}

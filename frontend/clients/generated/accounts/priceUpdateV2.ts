/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  PriceFeedMessage,
  PriceFeedMessageArgs,
  VerificationLevel,
  VerificationLevelArgs,
  getPriceFeedMessageSerializer,
  getVerificationLevelSerializer,
} from '../types';

export type PriceUpdateV2 = Account<PriceUpdateV2AccountData>;

export type PriceUpdateV2AccountData = {
  discriminator: Uint8Array;
  writeAuthority: PublicKey;
  verificationLevel: VerificationLevel;
  priceMessage: PriceFeedMessage;
  postedSlot: bigint;
};

export type PriceUpdateV2AccountDataArgs = {
  writeAuthority: PublicKey;
  verificationLevel: VerificationLevelArgs;
  priceMessage: PriceFeedMessageArgs;
  postedSlot: number | bigint;
};

export function getPriceUpdateV2AccountDataSerializer(): Serializer<
  PriceUpdateV2AccountDataArgs,
  PriceUpdateV2AccountData
> {
  return mapSerializer<
    PriceUpdateV2AccountDataArgs,
    any,
    PriceUpdateV2AccountData
  >(
    struct<PriceUpdateV2AccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['writeAuthority', publicKeySerializer()],
        ['verificationLevel', getVerificationLevelSerializer()],
        ['priceMessage', getPriceFeedMessageSerializer()],
        ['postedSlot', u64()],
      ],
      { description: 'PriceUpdateV2AccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([34, 241, 35, 99, 157, 126, 244, 205]),
    })
  ) as Serializer<PriceUpdateV2AccountDataArgs, PriceUpdateV2AccountData>;
}

export function deserializePriceUpdateV2(
  rawAccount: RpcAccount
): PriceUpdateV2 {
  return deserializeAccount(
    rawAccount,
    getPriceUpdateV2AccountDataSerializer()
  );
}

export async function fetchPriceUpdateV2(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PriceUpdateV2> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'PriceUpdateV2');
  return deserializePriceUpdateV2(maybeAccount);
}

export async function safeFetchPriceUpdateV2(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PriceUpdateV2 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePriceUpdateV2(maybeAccount) : null;
}

export async function fetchAllPriceUpdateV2(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PriceUpdateV2[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PriceUpdateV2');
    return deserializePriceUpdateV2(maybeAccount);
  });
}

export async function safeFetchAllPriceUpdateV2(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PriceUpdateV2[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializePriceUpdateV2(maybeAccount as RpcAccount)
    );
}

export function getPriceUpdateV2GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'zodialV2',
    '5E1ikr753b8RQZdtohZAY8wmpjn2hu9dWzrN5xEasmtu'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      writeAuthority: PublicKey;
      verificationLevel: VerificationLevelArgs;
      priceMessage: PriceFeedMessageArgs;
      postedSlot: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      writeAuthority: [8, publicKeySerializer()],
      verificationLevel: [40, getVerificationLevelSerializer()],
      priceMessage: [null, getPriceFeedMessageSerializer()],
      postedSlot: [null, u64()],
    })
    .deserializeUsing<PriceUpdateV2>((account) =>
      deserializePriceUpdateV2(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([34, 241, 35, 99, 157, 126, 244, 205])
    );
}

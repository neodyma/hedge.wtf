/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type FaucetSwapInstructionAccounts = {
  user: Signer;
  /** The faucet mint config for the token being burned */
  faucetMintFrom: PublicKey | Pda;
  /** The faucet mint config for the token being minted */
  faucetMintTo: PublicKey | Pda;
  mintToAuthority?: PublicKey | Pda;
  /** Mint account to burn from */
  mintFrom: PublicKey | Pda;
  /** Mint account to mint to */
  mintTo: PublicKey | Pda;
  /** User's token account for the "from" token (will be burned from) */
  userTokenFrom: PublicKey | Pda;
  /** User's token account for the "to" token (will be minted to) */
  userTokenTo?: PublicKey | Pda;
  /** Asset registry to look up asset indices */
  assetRegistry: PublicKey | Pda;
  /** Price cache to get current prices */
  priceCache: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type FaucetSwapInstructionData = {
  discriminator: Uint8Array;
  amount: bigint;
};

export type FaucetSwapInstructionDataArgs = { amount: number | bigint };

export function getFaucetSwapInstructionDataSerializer(): Serializer<
  FaucetSwapInstructionDataArgs,
  FaucetSwapInstructionData
> {
  return mapSerializer<
    FaucetSwapInstructionDataArgs,
    any,
    FaucetSwapInstructionData
  >(
    struct<FaucetSwapInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['amount', u64()],
      ],
      { description: 'FaucetSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([20, 155, 66, 38, 153, 101, 150, 184]),
    })
  ) as Serializer<FaucetSwapInstructionDataArgs, FaucetSwapInstructionData>;
}

// Args.
export type FaucetSwapInstructionArgs = FaucetSwapInstructionDataArgs;

// Instruction.
export function faucetSwap(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: FaucetSwapInstructionAccounts & FaucetSwapInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'zodialV2',
    '5E1ikr753b8RQZdtohZAY8wmpjn2hu9dWzrN5xEasmtu'
  );

  // Accounts.
  const resolvedAccounts = {
    user: { index: 0, isWritable: true as boolean, value: input.user ?? null },
    faucetMintFrom: {
      index: 1,
      isWritable: false as boolean,
      value: input.faucetMintFrom ?? null,
    },
    faucetMintTo: {
      index: 2,
      isWritable: false as boolean,
      value: input.faucetMintTo ?? null,
    },
    mintToAuthority: {
      index: 3,
      isWritable: false as boolean,
      value: input.mintToAuthority ?? null,
    },
    mintFrom: {
      index: 4,
      isWritable: true as boolean,
      value: input.mintFrom ?? null,
    },
    mintTo: {
      index: 5,
      isWritable: true as boolean,
      value: input.mintTo ?? null,
    },
    userTokenFrom: {
      index: 6,
      isWritable: true as boolean,
      value: input.userTokenFrom ?? null,
    },
    userTokenTo: {
      index: 7,
      isWritable: true as boolean,
      value: input.userTokenTo ?? null,
    },
    assetRegistry: {
      index: 8,
      isWritable: false as boolean,
      value: input.assetRegistry ?? null,
    },
    priceCache: {
      index: 9,
      isWritable: false as boolean,
      value: input.priceCache ?? null,
    },
    tokenProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 11,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    systemProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: FaucetSwapInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.mintToAuthority.value) {
    resolvedAccounts.mintToAuthority.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          102, 97, 117, 99, 101, 116, 45, 109, 105, 110, 116, 45, 97, 117, 116,
          104,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.faucetMintTo.value)
      ),
    ]);
  }
  if (!resolvedAccounts.userTokenTo.value) {
    resolvedAccounts.userTokenTo.value = context.eddsa.findPda(
      context.programs.getPublicKey(
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      ),
      [
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.user.value)
        ),
        bytes().serialize(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.mintTo.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'tokenProgram',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value =
      context.programs.getPublicKey(
        'associatedTokenProgram',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getFaucetSwapInstructionDataSerializer().serialize(
    resolvedArgs as FaucetSwapInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

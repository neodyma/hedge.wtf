/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitFaucetMintInstructionAccounts = {
  payer?: Signer;
  authority?: Signer;
  market?: PublicKey | Pda;
  faucetMint?: PublicKey | Pda;
  mintAuthority?: PublicKey | Pda;
  mint: Signer;
  tokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type InitFaucetMintInstructionData = {
  discriminator: Uint8Array;
  decimals: number;
};

export type InitFaucetMintInstructionDataArgs = { decimals: number };

export function getInitFaucetMintInstructionDataSerializer(): Serializer<
  InitFaucetMintInstructionDataArgs,
  InitFaucetMintInstructionData
> {
  return mapSerializer<
    InitFaucetMintInstructionDataArgs,
    any,
    InitFaucetMintInstructionData
  >(
    struct<InitFaucetMintInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['decimals', u8()],
      ],
      { description: 'InitFaucetMintInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([182, 118, 34, 100, 18, 140, 173, 8]),
    })
  ) as Serializer<
    InitFaucetMintInstructionDataArgs,
    InitFaucetMintInstructionData
  >;
}

// Args.
export type InitFaucetMintInstructionArgs = InitFaucetMintInstructionDataArgs;

// Instruction.
export function initFaucetMint(
  context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>,
  input: InitFaucetMintInstructionAccounts & InitFaucetMintInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'zodialV2',
    '5E1ikr753b8RQZdtohZAY8wmpjn2hu9dWzrN5xEasmtu'
  );

  // Accounts.
  const resolvedAccounts = {
    payer: {
      index: 0,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    authority: {
      index: 1,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
    market: {
      index: 2,
      isWritable: false as boolean,
      value: input.market ?? null,
    },
    faucetMint: {
      index: 3,
      isWritable: true as boolean,
      value: input.faucetMint ?? null,
    },
    mintAuthority: {
      index: 4,
      isWritable: false as boolean,
      value: input.mintAuthority ?? null,
    },
    mint: { index: 5, isWritable: false as boolean, value: input.mint ?? null },
    tokenProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    rent: { index: 8, isWritable: false as boolean, value: input.rent ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitFaucetMintInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.market.value) {
    resolvedAccounts.market.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([109, 97, 114, 107, 101, 116])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.authority.value)
      ),
    ]);
  }
  if (!resolvedAccounts.faucetMint.value) {
    resolvedAccounts.faucetMint.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([102, 97, 117, 99, 101, 116, 45, 109, 105, 110, 116])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.market.value)
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.mint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.mintAuthority.value) {
    resolvedAccounts.mintAuthority.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          102, 97, 117, 99, 101, 116, 45, 109, 105, 110, 116, 45, 97, 117, 116,
          104,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.faucetMint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'tokenProgram',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = context.programs.getPublicKey(
      'rent',
      'SysvarRent111111111111111111111111111111111'
    );
    resolvedAccounts.rent.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitFaucetMintInstructionDataSerializer().serialize(
    resolvedArgs as InitFaucetMintInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

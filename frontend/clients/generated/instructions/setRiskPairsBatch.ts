/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';
import {
  RiskPairEntry,
  RiskPairEntryArgs,
  getRiskPairEntrySerializer,
} from '../types';

// Accounts.
export type SetRiskPairsBatchInstructionAccounts = {
  authority?: Signer;
  market?: PublicKey | Pda;
  assetRegistry?: PublicKey | Pda;
  riskRegistry?: PublicKey | Pda;
};

// Data.
export type SetRiskPairsBatchInstructionData = {
  discriminator: Uint8Array;
  pairs: Array<RiskPairEntry>;
};

export type SetRiskPairsBatchInstructionDataArgs = {
  pairs: Array<RiskPairEntryArgs>;
};

export function getSetRiskPairsBatchInstructionDataSerializer(): Serializer<
  SetRiskPairsBatchInstructionDataArgs,
  SetRiskPairsBatchInstructionData
> {
  return mapSerializer<
    SetRiskPairsBatchInstructionDataArgs,
    any,
    SetRiskPairsBatchInstructionData
  >(
    struct<SetRiskPairsBatchInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['pairs', array(getRiskPairEntrySerializer())],
      ],
      { description: 'SetRiskPairsBatchInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([238, 151, 109, 51, 84, 112, 70, 168]),
    })
  ) as Serializer<
    SetRiskPairsBatchInstructionDataArgs,
    SetRiskPairsBatchInstructionData
  >;
}

// Args.
export type SetRiskPairsBatchInstructionArgs =
  SetRiskPairsBatchInstructionDataArgs;

// Instruction.
export function setRiskPairsBatch(
  context: Pick<Context, 'eddsa' | 'identity' | 'programs'>,
  input: SetRiskPairsBatchInstructionAccounts & SetRiskPairsBatchInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'zodialV2',
    '5E1ikr753b8RQZdtohZAY8wmpjn2hu9dWzrN5xEasmtu'
  );

  // Accounts.
  const resolvedAccounts = {
    authority: {
      index: 0,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
    market: {
      index: 1,
      isWritable: true as boolean,
      value: input.market ?? null,
    },
    assetRegistry: {
      index: 2,
      isWritable: false as boolean,
      value: input.assetRegistry ?? null,
    },
    riskRegistry: {
      index: 3,
      isWritable: true as boolean,
      value: input.riskRegistry ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SetRiskPairsBatchInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.market.value) {
    resolvedAccounts.market.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([109, 97, 114, 107, 101, 116])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.authority.value)
      ),
    ]);
  }
  if (!resolvedAccounts.assetRegistry.value) {
    resolvedAccounts.assetRegistry.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([97, 115, 115, 101, 116, 45, 114, 101, 103])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.market.value)
      ),
    ]);
  }
  if (!resolvedAccounts.riskRegistry.value) {
    resolvedAccounts.riskRegistry.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([114, 105, 115, 107, 45, 114, 101, 103])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.market.value)
      ),
    ]);
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSetRiskPairsBatchInstructionDataSerializer().serialize(
    resolvedArgs as SetRiskPairsBatchInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

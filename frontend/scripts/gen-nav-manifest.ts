import { register } from "esbuild-register/dist/node"
register({ extensions: [".ts", ".tsx"] })

import fg from "fast-glob"
import fs from "node:fs/promises"
import path from "node:path"
import { pathToFileURL } from "node:url"

type NavMeta = {
  group?: string
  hidden?: boolean
  href?: string
  icon?: string
  includeInNav?: boolean
  priority?: number
  title?: string
}

async function main() {
  const root = process.cwd()
  const matches = await fg(["app/**/nav.ts"], { cwd: root })
  const records: { meta: NavMeta; path: string }[] = []

  for (const rel of matches) {
    const fileUrl = pathToFileURL(path.join(root, rel)).href
    const mod = (await import(fileUrl)) as { default?: NavMeta }
    const meta = mod.default ?? {}

    const derived = "/" + rel.replace(/^app\//, "").replace(/\/nav\.ts$/, "")
    const pathCandidate = derived === "/page" ? "/" : derived
    const href = meta.href ?? pathCandidate

    records.push({ meta, path: href })
  }

  records.sort(
    (a, b) => (b.meta.priority ?? 0) - (a.meta.priority ?? 0) || a.path.localeCompare(b.path),
  )

  const outDir = path.join(root, "components/navigation")
  await fs.mkdir(outDir, { recursive: true })

  const file = `/* AUTO-GENERATED by scripts/gen-nav-manifest.ts */
import type { NavManifest } from "@/types/nav";
export const NAV_MANIFEST: NavManifest = ${JSON.stringify(
    records.map(({ meta, path }) => ({ meta, path })),
    null,
    2,
  )} as const;
`
  await fs.writeFile(path.join(outDir, "manifest.ts"), file, "utf8")
  console.log(`âœ” ${path.join(outDir, "manifest.ts")} written with ${records.length} entries`)
}

main().catch((e) => {
  console.error(e)
  process.exit(1)
})
